openapi: 3.0.1
info:
  title: RUTPAM API
  version: 0.2-dev_18
  description: >
    This API defines the methods and objects that provide and receive data from/to the server.
    The design extends the GTFS specification to a more abstract and complete knowledge base about the stored public transit networks.
  contact:
    name: NÃ©stor Lora
    email: nestorlora@geeklab.es
  license:
    name: MIT
servers:
  - url: 'http://rutpam.titan.geeklab.es:5000'
    description: Development local HTTP Server
# Method legend:
# GET - Get data (not modified)
# POST - Create resource if not exists
# PUT - Create resource
# DELETE - Delete/Disable/Expire resource
# PATCH - Edit resource
paths:
  /info:
    summary: Server information
    get:
      tags:
        - Server
      summary: Getting the server status
      description: Returns server information
      security: []
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    description: Server version
                    example: 1.0.0
                  contact:
                    type: string
                    description: Email contact
                    example: webmaster@localhost
                  web:
                    type: string
                    description: Project website
                    example: 'http://localhost/RUTPAM'
                  maintenance:
                    type: boolean
                    description: Show if the server may contain inaccurate information due to maintenance works
                    example: false
#  /auth - TODO
  /networks:
    get:
      tags:
        - Networks
      summary: Get all networks
      description: Returns all the networks in the database
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/200Networks'
    put:
      tags:
        - Networks
      summary: Add new network
      description: Save new network in database
      parameters: []
      requestBody:
        description: Network object that needs to be added to database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        200:
          $ref: '#/components/responses/200Networks'
        400:
          $ref: '#/components/responses/400BadRequest'
    patch:
      tags:
        - Networks
      summary: Update stored network
      description: Replace stored network in databes with new version.
      parameters: []
      requestBody:
        description: >
          Network object to be updated in database<br>
          You must provide a valid Network.id to complete the operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        200:
          $ref: '#/components/responses/200Networks'
        400:
          $ref: '#/components/responses/400BadRequest'
  /networks/{id}:
    get:
      tags:
        - Networks
      summary: Get a single network
      description: Return a single network
      parameters:
        - in: path
          name: id
          description: Network ID
          required: true
          schema:
            $ref: '#/components/schemas/objectId'
      responses:
        200:
          $ref: '#/components/responses/200Networks'
        400:
          $ref: '#/components/responses/400BadRequest'
    delete:
      tags:
        - Networks
      summary: Deletes a single network
      description: >
        Removes a network from de database <br>
        DANGER! This method does not removes all the network's associated elements
      parameters:
        - in: path
          name: id
          description: Network ID
          required: true
          schema:
            $ref: '#/components/schemas/objectId'
      responses:
        200:
          $ref: '#/components/responses/200Generic'
        400:
          $ref: '#/components/responses/400BadRequest'
  /networks/find:
    post:
      tags:
        - Networks
      summary: Search networks
      description: Returns all the networks matching the parameters
      requestBody:
        description: Network object with query values or RegExp
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      networks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Network'
        400:
          $ref: '#/components/responses/400BadRequest'
  /stations:
    get:
      tags:
        - Stations
      summary: Get all stations
      description: Returns all the stations in the database
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Station'
  /stations/{id}:
    get:
      tags:
        - Stations
      summary: Find station by ID
      description: Return a single station
      parameters:
        - in: path
          name: id
          description: Station ID
          required: true
          schema:
            $ref: '#/components/schemas/objectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Station'
  /stations/findByName:
    get:
      tags:
        - Stations
      summary: Find station by name
      description: Returns a list of stations that contains the provided name
      parameters:
        - in: query
          name: name
          description: Station name
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Station'
  /routes:
    get:
      tags:
        - Routes
      summary: Get all routes
      description: Returns all the routes in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      routes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Route'
  /routes/{id}:
    get:
      tags:
        - Routes
      summary: Find route by ID
      description: Return a single route
      parameters:
        - in: path
          name: id
          description: Station ID
          required: true
          schema:
            $ref: '#/components/schemas/objectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      routes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Route'
  /routes/type:
    get:
      tags:
        - Routes
      summary: Get all route types
      description: Returns all the route types in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      routeTypes:
                        type: array
                        items:
                          $ref: '#/components/schemas/RouteType'
  /subroutes:
    get:
      tags:
        - Subroutes
      summary: Get all subroutes
      description: Returns all the active subroutes in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      routes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Itinerary'
  /subroutes/findByRoute:
    get:
      tags:
        - Subroutes
      summary: Find subroutes by route ID
      description: Return multiple subroutes under a parent route
      parameters:
        - in: path
          name: routeId
          description: Parent route ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      routes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Itinerary'
  /agencies:
    get:
      tags:
        - Agencies
      summary: Get all agencies
      description: Returns all the agencies in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      agencies:
                        type: array
                        items:
                          $ref: '#/components/schemas/Agency'
  /agencies/{id}:
    get:
      tags:
        - Agencies
      summary: Find agency by ID
      description: Return a single agency
      parameters:
        - in: path
          name: id
          description: Agency ID
          required: true
          schema:
            $ref: '#/components/schemas/objectId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      agencies:
                        type: array
                        items:
                          $ref: '#/components/schemas/Agency'
  /stops:
    get:
      tags:
        - Stops
      summary: Get all stops
      description: Returns al the stops in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      stops:
                        type: array
                        items:
                          $ref: '#/components/schemas/Stop'
  /stops/{id}:
    get:
      tags:
        - Stops
      summary: Find stop by ID
      description: Return a single stop
      parameters:
        - in: path
          name: id
          description: Stop ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      stations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Station'
  /transfers:
    get:
      tags:
        - Transfers
      summary: Get all transfers
      description: Returns all the defined transfers in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      transfers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transfer'
components:
  schemas:
    Network:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Network ID
        shortName:
          type: string
          description: Contracted name or acronym used for the network
          example: "CTMAM"
        longName:
          type: string
          description: Extended or full-version name of the network
          example: "Consorcio de Transportes Metropolitanos del Ãrea de MÃ¡laga"
    Route:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Route ID
        network:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Network ID
        shortName:
          type: string
          description: >
            Short name of a route. This will often be a short, abstract identifier like "32", "100X", or "Green" that riders use to identify a route, but which doesn't give any indication of what places the route serves.
          example: N1
        longName:
          type: string
          description: >
            Full name of a route. This name is generally more descriptive than the shortName and often includes the route's destination or stop.
          example: Puerta Blanca - Alameda Principal - El Palo
        agencies:
          type: array
          items:
            $ref: '#/components/schemas/LineAgency'
        eid:
          type: string
          description: External ID (defined by the provider)
          example: 41
        itineraries:
          type: array
          items:
            $ref: '#/components/schemas/Itinerary'
        description:
          type: string
          description: >
            Description of a route that provides useful, quality information.
            Do not simply duplicate the name of the route.
          example: >
            "A" trains operate between Inwood-207 St, Manhattan and Far Rockaway-Mott Avenue, Queens at all times. Also from about 6AM until about midnight, additional "A" trains operate between Inwood-207 St and Lefferts Boulevard (trains typically alternate between Lefferts Blvd and Far Rockaway).
        type:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Route Type ID
        startDate:
          $ref: '#/components/schemas/startDate'
        endDate:
          $ref: '#/components/schemas/endDate'
        observations:
          type: string
          description: Aditional comments, informal data.
          example: Traslado de paradas por obras en Alameda Ppal
        color:
          type: string
          description: HTML-format route color designation that matches public facing material
          minLength: 6
          maxLength: 6
          example: 00FF00
        textColor:
          type: string
          description: HTML-format legible color to use for text drawn against a background of the previous color
          minLength: 6
          maxLength: 6
          example: FFFFFF
        url:
          type: string
          description: URL of a web page about the particular route.
          example: 'https://emtmalaga.es/linea/65'
    RouteType:
      type: object
      properties:
        gtfs_code:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
          description: >
            Standard GTFS route_type code:
              * `0` - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.
              * `1` - Subway, Metro. Any underground rail system within a metropolitan area.
              * `2` - Rail. Used for intercity or long-distance travel.
              * `3` - Bus. Used for short- and long-distance bus routes.
              * `4` - Ferry. Used for short- and long-distance boat service.
              * `5` - Cable car. Used for street-level cable cars where the cable runs beneath the car.
              * `6` - Gondola, Suspended cable car. Typically used for aerial cable cars where the car is suspended from the cable.
              * `7` - Funicular. Any rail system designed for steep inclines.
        gtfs_ext_code:
          type: integer
          enum:
          - 100
          - 101
          - 102
          - 103
          - 104
          - 105
          - 106
          - 107
          - 108
          - 109
          - 110
          - 111
          - 112
          - 113
          - 114
          - 115
          - 116
          - 117
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 209
          - 400
          - 401
          - 402
          - 403
          - 404
          - 405
          - 700
          - 701
          - 702
          - 703
          - 704
          - 705
          - 706
          - 707
          - 708
          - 709
          - 710
          - 711
          - 712
          - 713
          - 714
          - 715
          - 716
          - 717
          - 800
          - 900
          - 901
          - 902
          - 903
          - 904
          - 905
          - 906
          - 907
          - 1000
          - 1100
          #- 1200
          - 1300
          - 1400
          - 1500
          #- 1501
          - 1502
          - 1503
          - 1504
          - 1505
          - 1506
          - 1507
          - 1700
          description: >
            Google Transit's extended GTFS route_type code <br>
            [Legend](https://developers.google.com/transit/gtfs/reference/extended-route-types?) <br>
              * `100` - **Railway Service**
              * `101` - High Speed Rail Service
              * `102` - Long Distance Trains
              * `103` - Inter Regional Rail Service
              * `104` - Car Transport Rail Service
              * `105` - Sleeper Rail Service
              * `106` - Regional Rail Service
              * `107` - Tourist Railway Service
              * `108` - Rail Shuttle (within complex)
              * `109` - Suburban Railway
              * `110` - Replacement Rail Service
              * `111` - Special Rail Service
              * `112` - Lorry Transport Rail Service
              * `113` - All Rail Services
              * `114` - Cross-Country Rail Service
              * `115` - Vehicle Transport Rail Service
              * `116` - Rack and Pinion Railway
              * `117` - Additional Rail Service
              * `200` - **Coach Service**
              * `201` - International Coach Service
              * `202` - National Coach Service
              * `203` - Shuttle Coach Service
              * `204` - Regional Coach Service
              * `205` - Special Coach Service
              * `206` - Sightseeing Coach Service
              * `207` - Tourist Coach Service
              * `208` - Commuter Coach Service
              * `209` - All Coach Services
              * `400` - **Urban Railway Service**
              * `401` - Metro service
              * `402` - Underground Service
              * `403` - Urban Railway Service
              * `404` - All Urban Railway Services
              * `405` - Monorail
              * `700` - **Bus Service**
              * `701` - Regional Bus Service
              * `702` - Express Bus Service
              * `703` - Stopping Bus Service
              * `704` - Local Bus Service
              * `705` - Night Bus Service
              * `706` - Post Bus Service
              * `707` - Special Needs Bus
              * `708` - Mobility Bus Service
              * `709` - Mobility Bus for Registered Disabled
              * `710` - Sightseeing Bus
              * `711` - Shuttle Bus
              * `712` - School Bus
              * `713` - School and Public Service Bus
              * `714` - Rail Replacement Bus Service
              * `715` - Demand and Response Bus Service
              * `716` - All Bus Services
              * `717` - Share Taxi Service
              * `800` - **Trolleybus Service**
              * `900` - **Tram Service**
              * `901` - City Tram Service
              * `902` - Local Tram Service
              * `903` - Regional Tram Service
              * `904` - Sightseeing Tram Service
              * `905` - Shuttle Tram
              * `906` - All Tram Services
              * `907` - Cable Tram
              * `1000` - **Water Transport Service**
              * `1100` - **Air Service**
              * `1300` - **Aerial Lift Service**
              * `1400` - **Funicular Service**
              * `1500` - **Taxi Service**
              * `1502` - Water Taxi Service
              * `1503` - Rail Taxi Service
              * `1504` - Bike Taxi Service
              * `1505` - Licensed Taxi Service
              * `1506` - Private Hire Service Vehicle
              * `1507` - All Taxi Services
              * `1700` - **Miscellaneous Service**
    LineAgency:
      type: object
      properties:
        agency:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency ID
        role:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency role ID
    Agency:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency ID
        name:
          type: string
          description: Agency name
          example: 'Avanza Movilidad Urbana, S.L.U'
        info:
          type: array
          items:
            $ref: '#/components/schemas/AgencyInfo'
    AgencyInfo:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: AgencyInfoType ID
        value:
          type: string
          description: Actual piece of information
          example: billing@transport.net
        description:
          type: string
          description: Optional description of value
          example: Billing
    AgencyInfoType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Info type ID
        name:
          type: string
          description: Type name
          example: URL
        description:
          type: string
          description: Type description
          example: URI in RFC-3986 format
    Itinerary:
      type: object
      properties:
        eid:
          type: string
          description: External ID (defined by the provider)
          example: '41.5'
        type:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Subroute type ID (Going route/Return route/Circular route/Positioning move)
        headsign:
          type: string
          description: Headsign indication text
          example: El Palo
        stops:
          type: array
          items:
            $ref: '#/components/schemas/ItineraryStop'
        description:
          type: string
          description: Subroute description
          example: Ida. Itinerario 1
    ItineraryStop:
      type: object
      properties:
        stop:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Stop ID
        sequence:
          type: integer
          format: int32
          description: Sequence order of the stop in the subroute
          example: 14
        pickup:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Pickup or Drop off type ID
        dropoff:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Pickup or Drop off type ID
    Stop:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Stop ID
        eid:
          type: string
          description: External ID (defined by the provider)
          example: 41
        name:
          type: string
          description: Stop name. Usually describes the location around the stop.
          example: Alameda Principal - Sur
        townArea:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Town area ID
        station:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Parent station ID (if exists)
        platform:
          type: string
          description: >
            Platform identifier for a platform stop (a stop belonging to a station). 
            This should be just the platform identifier (eg. "G" or "3"). Words like âplatformâ 
            or "track" should not be included.
          example: 4B
        network:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Network ID
        zone:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Zone ID
        address:
          type: string
          description: Station address (if it has one)
          example: Paseo del Parque 21
        location:
          $ref: '#/components/schemas/LatLong'
        startDate:
          $ref: '#/components/schemas/startDate'
        endDate:
          $ref: '#/components/schemas/endDate'
    HaltType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Pickup or Drop off type ID
        name:
          type: string
          description: Pickup or Drop off method
          example: Sheduled
        gtfs_code:
          type: string
          description: GTFS code equivalent to this type
        description:
          type: string
          description: Method explanation or example
          example: The vehicle performs a regularly sheduled stop
        pickup:
          type: boolean
          description: Â¿Is this type valid for pick-ups?
          example: true
        dropoff:
          type: boolean
          description: Â¿Is this type valid for drop-offs?
          example: true
    PathPoint:
      type: object
      properties:
        point:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Point ID
        location:
          allOf:
          - $ref: '#/components/schemas/LatLong'
          - description: Point Location
        sequence:
          type: integer
          format: int32
          description: Sequence order of the point in the path
          example: 14
    Station:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Station ID
        eid:
          type: string
          description: External ID (defined by the provider)
          example: 41
        name:
          type: string
          description: Station name
          example: MÃ¡laga-MarÃ­a Zambrano
        address:
          type: string
          description: Station address (if it has one)
          example: Paseo del Parque 21
        location:
          $ref: '#/components/schemas/LatLong'
    Town:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Town ID
        name:
          type: string
          description: Town name
          example: Ãlora
    TownArea:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Town area ID
        name:
          type: string
          description: Area name
          example: Airport
        town:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Parent Town ID
    RouteAgencies:
      type: object
      properties:
        id:
         allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Relation ID
        route:
          allOf:
          - $ref: '#/components/schemas/objectId'
          description: Route ID
        agency:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency ID
        role:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency role ID
        startDate:
          $ref: '#/components/schemas/startDate'
        endDate:
          $ref: '#/components/schemas/endDate'
    
    Point:
      type: object
      properties:
        id:
         allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Point ID
        location:
          $ref: '#/components/schemas/LatLong'

    POS:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Point of sale ID
        agency:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency ID
        townArea:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Town area ID
        type:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Pos type ID
        address:
          type: string
          description: Station address (if it has one)
          example: Paseo del Parque 21
        location:
          $ref: '#/components/schemas/LatLong'
    AgencyRole:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Agency role ID
        role:
          type: string
          description: Name
          example: Planning
        description:
          type: string
          description: Description
          example: 'Timetables, detours, reinforcements, etc...'
    SubrouteType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Subroute type ID
        type:
          type: string
          description: Type name
          example: Positioning move
        description:
          type: string
          description: Type description
          example: Empty ride at the start or end of service for a vehicle. Typically from or to the depot.
    PosType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Point of sale type ID
        type:
          type: string
          description: Type name
          example: Kiosk
    
    TransferType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Transfer type ID
        type:
          type: string
          description: Type name
          example: Sheduled
        description:
          type: string
          description: Type description
          example: The vehicles wait for the tranfer passengers to depart
    Transfer:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Transfer ID
        stop1:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Stop ID where tranfer begins
        stop2:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Stop ID where tranfer ends
        type:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Tranfer type ID
        minimunTime:
          type: integer
          format: int32
          description: Amount of time, in seconds, that must be available to permit a transfer between routes at the specified stops (if, needed)
    Path:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Path ID
        color:
          type: string
          description: Path color (RGB)
          example: '009639'
        transparency:
          type: number
          format: float
          description: Transparency of the path [0,1]
          example: 1
    Zone:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Zone ID
        network:
          allOf:
          - $ref: '#/components/schemas/objectId'
          - description: Network ID
        name:
          type: string
          description: Zone name
          example: A
    LatLong:
      type: object
      properties:
        lat:
          type: number
          format: float
          description: Latitude
          example: 36.6916079
        lon:
          type: number
          format: float
          description: Longitude
          example: -4.4561347
      required:
        - lat
        - lon
    objectId:
      type: string
      minLength: 24
      maxLength: 24
      example: '5ded41d17f28ec03b9787b21'
    startDate:
      type: string
      format: date-time
      description: >
        Moment when this object start his validity (within those parameters)
        The database may contain other versions (within other ID)
      example: '2019-08-19'
    endDate:
      type: string
      format: date-time
      description: >
        Moment when this object ends his validity (within those parameters)
        The database may contain other versions (within other ID)
      example: '2019-08-19'
    ApiResponse:
      type: object
      properties:
        code:
          type: number
          format: int32
          example: 200
        status:
          type: string
          example: "OK"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    # COMMON SUCCESS
    200Generic:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            code: 200
            status: "OK"
    200Networks:
      description: Successful operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  networks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Network'
    # COMMON ERRORS
    400BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            Generic error:
              value:
                code: 4000
                description: Unexpected input error
            No parameters supplied:
              value:
                code: 4001
                description: You MUST provide at least one of [%] parameters.
            Mandatory parameters not provided:
              value:
                code: 4002
                description: Parameters [%] are required to proceed.
    401Unauthorized:
      description: Access token is missing or is invalid
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Authentication scheme(s) and parameters applicable to the target resource
          #example: Newauth realm="apps", type=1, title="Login to \"apps\"", Basic realm="simple"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    403Forbidden:
      description: Forbidden operation for authenticated user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    404NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    429TooManyRequests:
      description: The user has sent too many requests in a given amount of time
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before making a new request
          example: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
security:
  - bearerAuth: []
tags:
  - name: Server
    description: Server status and authentication
  - name: Networks
    description: Transit networks
  - name: Routes
  - name: Subroutes
  - name: Stops
  - name: Stations
  - name: Transfers
  - name: Paths
  - name: Points
  - name: Agencies
  - name: Zones
  - name: Towns
